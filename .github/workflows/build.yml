name: (Build) - Build windows/mac/linux bundles

on:
  workflow_call:

permissions:
  contents: write

jobs:
  build-linux-zip:
    runs-on: ubuntu-20.04

    steps:
    - name: Download source
      continue-on-error: true
      uses: actions/download-artifact@v4
      with:
        name: inochi-session-source
        path: '.'
      
    - uses: dlang-community/setup-dlang@v1
      with:
        compiler: ldc-latest
  
    - name: 'Get dependencies'
      run: |
        rm .dub/packages/local-packages.json
        mv .dub/packages/local-packages.linux.json .dub/packages/local-packages.json

        dub add-path .flatpak-dub
        dub add-local .flatpak-dub/semver/*/semver;
        dub add-local .flatpak-dub/gitver/*/gitver;

        sudo apt-get update && sudo apt-get -y --no-install-recommends install libsdl2-dev libfreetype6-dev
    
    - name: 'Build Inochi Session'
      run: |
        export DFLAGS='-g --d-debug'

        # Build metadata (like version information and icons)
        dub build --skip-registry=all --config=update-version
        dub build --skip-registry=all --config=meta

        # Build the project, with its main file included, without unittests
        dub build --skip-registry=all --build=debug --config=barebones

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: inochi-session-linux-x86_64
        include-hidden-files: true
        path: 'out/'


  build-windows-zip:
    runs-on: windows-latest
    # Disable for now until numem actually works
    if: false

    steps:
    - uses: dlang-community/setup-dlang@v1
      with:
        compiler: ldc-latest
        
    - name: Download source
      continue-on-error: true
      uses: actions/download-artifact@v4
      with:
        name: inochi-session-source
        path: '.'
      
    - name: 'Get dependencies'
      run: |
        rm .dub/packages/local-packages.json
        mv .dub/packages/local-packages.win.json .dub/packages/local-packages.json

        dub add-path .flatpak-dub
        dub add-local (Get-Item .flatpak-dub\semver\*\semver\dub.sdl).DirectoryName
        dub add-local (Get-Item .flatpak-dub\gitver\*\gitver\dub.sdl).DirectoryName

    - name: 'Build Inochi Session'
      run: |
        function Invoke-VSDevEnvironment {
        $vswhere = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe"
              $installationPath = & $vswhere -prerelease -legacy -latest -property installationPath
              $Command = Join-Path $installationPath "Common7\Tools\vsdevcmd.bat"
            & "${env:COMSPEC}" /s /c "`"$Command`" -no_logo && set" | Foreach-Object {
                  if ($_ -match '^([^=]+)=(.*)') {
                      [System.Environment]::SetEnvironmentVariable($matches[1], $matches[2])
                  }
              }
          }
          Invoke-VSDevEnvironment

          # Build metadata (like version information and icons)
          dub build --skip-registry=all --config=update-version
          dub build --skip-registry=all --config=meta

          # Build the project, with its main file included, without unittests
          $Env:DFLAGS = '-g'
          dub build --skip-registry=all --build=debug --config=win32-nightly

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: inochi-session-win32-x86_64
        include-hidden-files: true
        path: 'out/'

  build-macos-dmg:
    runs-on: macos-14

    steps:

    - uses: dlang-community/setup-dlang@v1.4.0
      with:
        compiler: ldc-latest
  
    - name: Download source
      continue-on-error: true
      uses: actions/download-artifact@v4
      with:
        name: inochi-session-source
        path: '.'
      
    - name: "Prepare for DMG packing"
      continue-on-error: true
      run: |
        export HOMEBREW_NO_INSTALL_CLEANUP=1
        export HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK=1
        brew update
        brew install create-dmg gettext

    - name: "Remove conflicting brew packages"
      continue-on-error: true
      run: |
        # Remove conflicting brew items
        brew remove --ignore-dependencies libpng brotli harfbuzz

    - name: "Remove final conflicting files"
      continue-on-error: true
      run: |
        # Delete fake harfbuzz if need be
        if [ -f "/usr/local/lib/libharfbuzz.dylib" ]; then
          sudo rm -r /usr/local/lib/libharfbuzz.dylib
        fi

        # And the .a for it as well
        if [ -f "/usr/local/lib/libharfbuzz.a" ]; then
          sudo rm -r /usr/local/lib/libharfbuzz.a
        fi

    - name: 'Generate i18n'
      run: |
        sudo chmod +x ./gentl.sh
        ./gentl.sh
      
    - name: 'Get dependencies'
      run: |
        rm .dub/packages/local-packages.json
        mv .dub/packages/local-packages.mac.json .dub/packages/local-packages.json

        dub add-path .flatpak-dub
        dub add-local .flatpak-dub/semver/*/semver;
        dub add-local .flatpak-dub/gitver/*/gitver;

    - name: 'Build inochi-session'
      env:
        DFLAGS: "-g -force-dwarf-frame-section=false"
      run: |

        # Build metadata (like version information and icons)
        dub build --skip-registry=all --config=update-version
        dub build --skip-registry=all --config=meta

        # First build ARM64 version...
        echo "Building arm64 binary..."
        dub build --skip-registry=all --config=osx-nightly --arch=arm64-apple-macos
        mv "out/Inochi Session.app/Contents/MacOS/inochi-session" "out/Inochi Session.app/Contents/MacOS/inochi-session-arm64"

        # Then the X86_64 version...
        echo "Building x86_64 binary..."
        dub build --skip-registry=all --config=osx-nightly --arch=x86_64-apple-macos
        mv "out/Inochi Session.app/Contents/MacOS/inochi-session" "out/Inochi Session.app/Contents/MacOS/inochi-session-x86_64"

        # Glue them together with lipo
        echo "Gluing them together..."
        lipo "out/Inochi Session.app/Contents/MacOS/inochi-session-x86_64" "out/Inochi Session.app/Contents/MacOS/inochi-session-arm64" -output "out/Inochi Session.app/Contents/MacOS/inochi-session" -create

        # Print some nice info
        echo "Done!"
        lipo -info "out/Inochi Session.app/Contents/MacOS/inochi-session"

        # Cleanup and bundle
        echo "Cleaning up..."
        rm "out/Inochi Session.app/Contents/MacOS/inochi-session-x86_64" "out/Inochi Session.app/Contents/MacOS/inochi-session-arm64"
        sh ./build-aux/osx/osxbundle.sh

    - name: 'Build DMG'
      run: |
        sh ./build-aux/osx/gendmg.sh

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: inochi-session-macos
        include-hidden-files: true
        path: 'out/'

