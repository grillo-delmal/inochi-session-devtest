# Based on https://raw.githubusercontent.com/gasinvein/proton-flatpak/7962b87cf0d079998ea861e1a358fa93d63af7e5/.github/workflows/flatpak.yml
name: Flatpak

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  APP_ID: io.github.grillo_delmal.inochi-session
  MANIFEST_PATH: io.github.grillo_delmal.inochi-session.yml
  FLATPAK_BUNDLE: inochi-session
  FLATPAK_BRANCH: devtest
  DESTINATION_GITHUB_USERNAME: grillo-delmal 
  DESTINATION_REPOSITORY_NAME: inochi2d-flatpak-devtest
  FLATPAK_BUILD_DIR: build-dir
  FLATPAK_BUILD_REPO: build-repo

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: bilelmoussaoui/flatpak-github-actions:freedesktop-22.08
      options: --privileged

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true
    - name: Fix git
      run: |
        git config --global --add safe.directory /__w/${{ env.DESTINATION_REPOSITORY_NAME }}/${{ env.DESTINATION_REPOSITORY_NAME }}

    - name: Dump canonical manifest
      run: |
        set -e
        flatpak-builder --show-manifest ${MANIFEST_PATH} > canonical-manifest.json

    - name: Download flatpak SDK and sources
      run: |
        set -e
        flatpak remote-add --user --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
        flatpak-builder --default-branch=${FLATPAK_BRANCH} --install-deps-from=flathub --install-deps-only --user /dev/null ${MANIFEST_PATH}
        flatpak-builder --default-branch=${FLATPAK_BRANCH} --download-only /dev/null ${MANIFEST_PATH}

    - name: Prime cache
      uses: actions/cache@v3
      with:
        path: |
          .flatpak-builder/ccache
        key: flatpak-builder-${{ hashFiles('canonical-manifest.json') }}
        restore-keys: |
          flatpak-builder-

    - name: Build flatpak
      run: |
        set -e
        flatpak-builder --default-branch=${FLATPAK_BRANCH} --disable-updates --disable-download --ccache --sandbox --repo=${FLATPAK_BUILD_REPO} ${FLATPAK_BUILD_DIR} ${MANIFEST_PATH}

    - name: Upload flatpak repo
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.FLATPAK_BUILD_REPO }}
        path: |
          ${{ env.FLATPAK_BUILD_REPO }}
          !${{ env.FLATPAK_BUILD_REPO }}/.lock

    - name: Upload source
      uses: actions/upload-artifact@v3
      with:
        name: inochi-session-source
        path: /__w/inochi-session-nightly/inochi-session-nightly/.flatpak-builder/build/Inochi-Session-1/*
        retention-days: 1

  publish-bundle:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - uses: actions/checkout@v2

    - name: Install flatpak
      run: |
        set -e
        sudo apt-get update && sudo apt-get -y --no-install-recommends install flatpak

    - name: Download flatpak repo
      uses: actions/download-artifact@v1
      with:
        name: ${{ env.FLATPAK_BUILD_REPO }}

    - name: Create flatpak bundle
      run: |
        set -e
        mkdir -p ${FLATPAK_BUILD_REPO}/{extensions,refs/{mirrors,remotes},state,tmp/cache}
        flatpak build-bundle --runtime-repo=https://flathub.org/repo/flathub.flatpakrepo ${FLATPAK_BUILD_REPO} ${FLATPAK_BUNDLE}.flatpak ${APP_ID} ${FLATPAK_BRANCH}
        flatpak build-bundle --runtime ${FLATPAK_BUILD_REPO} ${FLATPAK_BUNDLE}.debug.flatpak ${APP_ID/-/_}.Debug ${FLATPAK_BRANCH}

    - name: Upload flatpak bundle
      uses: actions/upload-artifact@v1
      with:
        name: ${{ env.FLATPAK_BUNDLE }}
        path: ${{ env.FLATPAK_BUNDLE }}.flatpak

    - name: Upload flatpak bundle for debug
      uses: actions/upload-artifact@v1
      with:
        name: ${{ env.FLATPAK_BUNDLE }}.debug
        path: ${{ env.FLATPAK_BUNDLE }}.debug.flatpak

    - name: Release to nightly tag
      if: github.ref == 'refs/heads/main'
      uses: softprops/action-gh-release@v1
      with:
        name: 'Unofficial Nightly Build'
        tag_name: dev-test
        files: |
          ${{ env.FLATPAK_BUNDLE }}.flatpak
          ${{ env.FLATPAK_BUNDLE }}.debug.flatpak

    - name: Release to other tag
      if: github.ref != 'refs/heads/main'
      uses: softprops/action-gh-release@v1
      with:
        name: 'Test Build'
        tag_name: dispatch
        files: |
          ${{ env.FLATPAK_BUNDLE }}.flatpak
          ${{ env.FLATPAK_BUNDLE }}.debug.flatpak

  publish-oci:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: build

    steps:
    - uses: actions/checkout@v2

    - name: Install flatpak and libcontainers tools
      run: |
        set -e
        . /etc/os-release
        sudo apt-get update && sudo apt-get -y --no-install-recommends install skopeo flatpak jq

    - name: Download flatpak repo
      uses: actions/download-artifact@v1
      with:
        name: ${{ env.FLATPAK_BUILD_REPO }}

    - name: Create OCI bundle
      run: |
        set -e
        mkdir -p ${FLATPAK_BUILD_REPO}/{extensions,refs/{mirrors,remotes},state,tmp/cache}
        flatpak build-bundle \
          --oci \
          --runtime-repo=https://flathub.org/repo/flathub.flatpakrepo \
          ${FLATPAK_BUILD_REPO} ${FLATPAK_BUNDLE} ${APP_ID} ${FLATPAK_BRANCH}
        flatpak build-bundle \
          --oci \
          --runtime \
          ${FLATPAK_BUILD_REPO} ${FLATPAK_BUNDLE}.debug ${APP_ID/-/_}.Debug ${FLATPAK_BRANCH}

    - name: Publish OCI image
      env:
        GITHUB_TOKEN: ${{ secrets.PAT }}
        REGISTRY_AUTH_FILE: /tmp/auth.json
      run: |
        export IMAGE_REPOSITORY=$(echo $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]')
        set -e
        skopeo login --username "${{ github.actor }}" --password-stdin ghcr.io <<<$GITHUB_TOKEN
        skopeo copy \
          oci:${FLATPAK_BUNDLE} \
          docker://ghcr.io/${IMAGE_REPOSITORY}:$FLATPAK_BRANCH
        skopeo copy \
          oci:${FLATPAK_BUNDLE}.debug \
          docker://ghcr.io/${IMAGE_REPOSITORY}-debug:$FLATPAK_BRANCH

  update-index:
    runs-on: ubuntu-latest
    needs: publish-oci

    steps:
    - run: echo "REPO_NAME=${{ github.event.repository.name }}" >> $GITHUB_ENV

    - name: Update static index
      env:
        REGISTRY_AUTH_FILE: /tmp/auth.json
      run: |
        export IMAGE_REPOSITORY=$(echo $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]')
        set -x
        git clone -b main https://github.com/$DESTINATION_GITHUB_USERNAME/$DESTINATION_REPOSITORY_NAME.git gh-pages
        mkdir -p ./gh-pages/repos
        skopeo inspect docker://ghcr.io/${IMAGE_REPOSITORY}:$FLATPAK_BRANCH | \
          jq --arg github_repository "${GITHUB_REPOSITORY}" '. as $img | { "Name": $github_repository, "Images": [$img] }' > \
          ./gh-pages/repos/${REPO_NAME}.o
        [ -s ./gh-pages/repos/${REPO_NAME}.o ] && \
          mv ./gh-pages/repos/${REPO_NAME}.o ./gh-pages/repos/${REPO_NAME} || \
          rm ./gh-pages/repos/${REPO_NAME}.o
        skopeo inspect docker://ghcr.io/${IMAGE_REPOSITORY}-debug:$FLATPAK_BRANCH | \
          jq --arg github_repository "${GITHUB_REPOSITORY}-debug" '. as $img | { "Name": $github_repository, "Images": [$img] }' > \
          ./gh-pages/repos/${REPO_NAME}-debug.o
        [ -s ./gh-pages/repos/${REPO_NAME}-debug.o ] && \
          mv ./gh-pages/repos/${REPO_NAME}-debug.o ./gh-pages/repos/${REPO_NAME}-debug || \
          rm ./gh-pages/repos/${REPO_NAME}-debug.o
        git -C ./gh-pages add .

    - name: Check for changes
      id: is-updated 
      run: |
        set -x
        git -C ./gh-pages status -s -uno
        ls ./gh-pages/repos/
        [ -z "$(git -C ./gh-pages status -s -uno)" ] || echo "updated=true" >> $GITHUB_OUTPUT

    - name: Push to repository
      if: steps.is-updated.outputs.updated
      uses: cpina/github-action-push-to-another-repository@main
      env:
        API_TOKEN_GITHUB: ${{ secrets.PAT }}
      with:
        source-directory: 'gh-pages'
        destination-github-username: ${{ env.DESTINATION_GITHUB_USERNAME }}
        destination-repository-name: ${{ env.DESTINATION_REPOSITORY_NAME }}
        user-email: github-actions[bot]@users.noreply.github.com
        commit-message: Update index
        target-branch: main

  windows-zip:
    runs-on: windows-latest
    needs: build

    steps:
    - uses: dlang-community/setup-dlang@4c99aa991ce7d19dd3064de0a4f2f6b2f152e2d7
      with:
        compiler: ldc-latest
        
    - name: Download source
      continue-on-error: true
      uses: actions/download-artifact@v3
      with:
        name: inochi-session-source
        path: './'
      
    - name: "Set dependencies"
      run: |
        dub add-path .flatpak-dub

    - name: 'Build Inochi Session'
      run: |
        function Invoke-VSDevEnvironment {
        $vswhere = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe"
              $installationPath = & $vswhere -prerelease -legacy -latest -property installationPath
              $Command = Join-Path $installationPath "Common7\Tools\vsdevcmd.bat"
            & "${env:COMSPEC}" /s /c "`"$Command`" -no_logo && set" | Foreach-Object {
                  if ($_ -match '^([^=]+)=(.*)') {
                      [System.Environment]::SetEnvironmentVariable($matches[1], $matches[2])
                  }
              }
          }
          Invoke-VSDevEnvironment
          
          # Build metadata (like version information and icons)
          dub build --skip-registry=all --config=meta

          # Build the project, with its main file included, without unittests
          dub build --skip-registry=all --build=release --config=barebones --debug=InExperimental --override-config=facetrack-d/web-adaptors

    - name: Archive Zip
      uses: thedoctor0/zip-release@main
      with:
        type: 'zip'
        filename: 'inochi-session-win32-x86_64.zip'
        directory: 'out/'
        path: '*'

    - name: Release to nightly tag
      if: github.ref == 'refs/heads/main'
      uses: softprops/action-gh-release@v1
      with:
        name: 'Unofficial Nightly Build'
        tag_name: dev-test
        files: 'out/inochi-session-win32-x86_64.zip'

    - name: Release to other tag
      if: github.ref != 'refs/heads/main'
      uses: softprops/action-gh-release@v1
      with:
        name: 'Test Build'
        tag_name: dispatch
        files: 'out/inochi-session-win32-x86_64.zip'
