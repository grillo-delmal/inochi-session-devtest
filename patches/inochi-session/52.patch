From 72437397ffbc160c9f8bd8bf8a58198f53cfc12f Mon Sep 17 00:00:00 2001
From: Grillo del Mal <grillo@delmal.cl>
Date: Mon, 4 Mar 2024 03:09:52 -0300
Subject: [PATCH 1/3] Implement animation control system

---
 source/session/animation/package.d | 151 +++++++++++++++++++++++++++++
 source/session/panels/animations.d |  67 +++++++++++++
 source/session/scene/package.d     |  47 +++++++++
 3 files changed, 265 insertions(+)
 create mode 100644 source/session/animation/package.d
 create mode 100644 source/session/panels/animations.d

diff --git a/source/session/animation/package.d b/source/session/animation/package.d
new file mode 100644
index 0000000..cd98adc
--- /dev/null
+++ b/source/session/animation/package.d
@@ -0,0 +1,151 @@
+module session.animation;
+
+import session.tracking;
+import inochi2d.core.animation;
+import inochi2d.core.animation.player;
+import fghj;
+import i18n;
+import std.format;
+
+enum TriggerType {
+    None,
+    TrackingTrigger,
+    EventTrigger
+}
+
+enum TriggerEvent {
+    None,
+    TrackingOff,
+    TrackingOn,
+}
+
+class AnimationControl {
+public:
+    string name;
+    bool loop = true;
+    bool inmediateStop = false;
+
+    TriggerType type = TriggerType.None;
+
+    // Binding
+    string sourceName;
+    string sourceDisplayName;
+    SourceType sourceType;
+    bool inverse;
+    float leadInValue = 1;
+    float leadOutValue = 0;
+    float fullStopValue = -1;
+
+    // EventBidning
+    TriggerEvent leadInEvent;
+    TriggerEvent leadOutEvent;
+    TriggerEvent fullStopEvent;
+
+    // Util
+    AnimationPlaybackRef anim; 
+
+    void serialize(S)(ref S serializer) {
+        auto state = serializer.objectBegin;
+            serializer.putKey("name");
+            serializer.putValue(name);
+            serializer.putKey("loop");
+            serializer.putValue(loop);
+            serializer.putKey("inmediateStop");
+            serializer.putValue(inmediateStop);
+            serializer.putKey("triggerType");
+            serializer.serializeValue(type);
+
+            switch(type) {
+                case TriggerType.TrackingTrigger:
+                    serializer.putKey("sourceName");
+                    serializer.putValue(sourceName);
+                    serializer.putKey("sourceType");
+                    serializer.serializeValue(sourceType);
+
+                    serializer.putKey("inverse");
+                    serializer.putValue(inverse);
+
+                    serializer.putKey("leadInValue");
+                    serializer.putValue(leadInValue);
+                    serializer.putKey("leadOutValue");
+                    serializer.putValue(leadOutValue);
+                    serializer.putKey("fullStopValue");
+                    serializer.putValue(fullStopValue);
+                    break;
+                case TriggerType.EventTrigger:
+                    serializer.putKey("leadInEvent");
+                    serializer.serializeValue(leadInEvent);
+                    serializer.putKey("leadOutEvent");
+                    serializer.serializeValue(leadOutEvent);
+                    serializer.putKey("fullStopEvent");
+                    serializer.serializeValue(fullStopEvent);
+                    break;
+                default: break;
+            }
+
+        serializer.objectEnd(state);
+    }
+
+    SerdeException deserializeFromFghj(Fghj data) {
+        data["name"].deserializeValue(name);
+        data["loop"].deserializeValue(loop);
+        data["inmediateStop"].deserializeValue(inmediateStop);
+        data["triggerType"].deserializeValue(type);
+
+        switch(type) {
+            case TriggerType.TrackingTrigger:
+                data["sourceName"].deserializeValue(sourceName);
+                data["sourceType"].deserializeValue(sourceType);
+
+                data["inverse"].deserializeValue(inverse);
+                
+                data["leadInValue"].deserializeValue(leadInValue);
+                data["leadOutValue"].deserializeValue(leadOutValue);
+                data["fullStopValue"].deserializeValue(fullStopValue);
+                this.createSourceDisplayName();
+                break;
+            case TriggerType.EventTrigger:
+                data["leadInEvent"].deserializeValue(leadInValue);
+                data["leadOutEvent"].deserializeValue(leadOutValue);
+                data["fullStopEvent"].deserializeValue(fullStopValue);
+                break;
+            default: break;
+        }
+                
+        return null;
+    }
+
+    bool finalize(ref AnimationPlayer player) {
+        anim = player.createOrGet(name);
+        return anim !is null;
+
+    }
+
+    void createSourceDisplayName() {
+        switch(sourceType) {
+            case SourceType.Blendshape:
+                sourceDisplayName = sourceName;
+                break;
+            case SourceType.BonePosX:
+                sourceDisplayName = _("%s (X)").format(sourceName);
+                break;
+            case SourceType.BonePosY:
+                sourceDisplayName = _("%s (Y)").format(sourceName);
+                break;
+            case SourceType.BonePosZ:
+                sourceDisplayName = _("%s (Z)").format(sourceName);
+                break;
+            case SourceType.BoneRotRoll:
+                sourceDisplayName = _("%s (Roll)").format(sourceName);
+                break;
+            case SourceType.BoneRotPitch:
+                sourceDisplayName = _("%s (Pitch)").format(sourceName);
+                break;
+            case SourceType.BoneRotYaw:
+                sourceDisplayName = _("%s (Yaw)").format(sourceName);
+                break;
+            default: assert(0);    
+        }
+    }
+
+}
diff --git a/source/session/panels/animations.d b/source/session/panels/animations.d
new file mode 100644
index 0000000..43a4af3
--- /dev/null
+++ b/source/session/panels/animations.d
@@ -0,0 +1,67 @@
+module session.panels.animations;
+import inui.panel;
+import i18n;
+import session.scene;
+import inui.widgets;
+import std.string;
+import std.algorithm.searching;
+import inochi2d.core.animation.player;
+import inmath;
+
+class AnimationsPanel : Panel {
+    string _selected;
+    immutable(char) * _selectedCName;
+    string _selectFilter;
+
+protected:
+
+    override 
+    void onUpdate() {
+        auto item = insSceneSelectedSceneItem();
+        if (item) {
+
+            if (uiImButton(__("Save to File"))) {
+                try {
+                    item.saveAnimations();
+                } catch (Exception ex) {
+                    uiImDialog(__("Error"), ex.msg);
+                }
+            }
+
+            foreach(ref ac; item.animations) {
+                uiImPush(&ac);
+                auto anim = ac.anim;
+                if (uiImHeader(ac.name.toStringz, true)) {
+
+                    if (uiImButton("")) {
+                        anim.stop(ac.inmediateStop);
+                    }
+                    uiImSameLine(0, 0);
+                    
+                    if (uiImButton(anim && !(!anim.playing || anim.paused) ? "" : "")) {
+                        if (!anim.playing || anim.paused) anim.play(ac.loop);
+                        else anim.pause();
+                    }
+                    uiImSameLine(0, 0);
+                    uiImProgress((cast(float)anim.frame) / anim.frames, vec2(-float.min_normal, 0), "");
+
+                    uiImCheckbox(__("Loop"), ac.loop);
+                    uiImCheckbox(__("Inmediate Stop"), ac.inmediateStop);
+
+                }
+                uiImPop();
+            }
+        } else {
+            uiImLabel(_("No puppet selected"));
+        }
+    }
+
+public:
+    this() {
+        super("Animations", _("Animations"), true);
+        _selected = _("Select an animation");
+        _selectedCName = _selected.toStringz;
+    }
+}
+
+mixin inPanel!AnimationsPanel;
\ No newline at end of file
diff --git a/source/session/scene/package.d b/source/session/scene/package.d
index 37ef86f..fd658a3 100644
--- a/source/session/scene/package.d
+++ b/source/session/scene/package.d
@@ -10,6 +10,7 @@ import inmath;
 import inui.input;
 import inui;
 import session.tracking;
+import session.animation;
 import session.tracking.vspace;
 import session.panels.tracking : insTrackingPanelRefresh;
 import session.log;
@@ -35,6 +36,7 @@ struct SceneItem {
     string filePath;
     Puppet puppet;
     TrackingBinding[] bindings;
+    AnimationControl[] animations;
     AnimationPlayer player;
     AnimationPlaybackRef sleepAnim;
 
@@ -43,6 +45,11 @@ struct SceneItem {
         inWriteINPExtensions(puppet, filePath);
     }
 
+    void saveAnimations() {
+        puppet.extData["com.inochi2d.inochi-session.animations"] = cast(ubyte[])serializeToJson(animations);
+        inWriteINPExtensions(puppet, filePath);
+    }
+
     bool tryLoadBindings() {
         if ("com.inochi2d.inochi-session.bindings" in puppet.extData) {
             auto preBindings = deserialize!(TrackingBinding[])(cast(string)puppet.extData["com.inochi2d.inochi-session.bindings"]);
@@ -59,6 +66,22 @@ struct SceneItem {
         return false;
     }
 
+    bool tryLoadAnimations() {
+        if ("com.inochi2d.inochi-session.animations" in puppet.extData) {
+            auto preAnimation = deserialize!(AnimationControl[])(cast(string)puppet.extData["com.inochi2d.inochi-session.animations"]);
+
+            // finalize the loading
+            animations = [];
+            foreach(ref animation; preAnimation) {
+                if (animation.finalize(player)) {
+                    animations ~= animation;
+                }
+            }
+            return true;
+        }
+        return false;
+    }
+
     void genBindings() {
         struct LinkSrcDst {
             Parameter dst;
@@ -112,6 +135,25 @@ struct SceneItem {
             }
         }
     }
+
+    void genAnimationControls() {
+        AnimationControl[string] acs; 
+        foreach(ref ac; animations) {
+            acs[ac.name] = ac;
+        }
+
+        foreach(name, ref anim; puppet.getAnimations()) {
+            if(name !in acs){
+                AnimationControl ac = new AnimationControl();
+                ac.name = name;
+                ac.finalize(player);
+
+                animations ~= ac;
+            }
+        }
+
+    }
+
 }
 
 /**
@@ -132,7 +174,12 @@ void insSceneAddPuppet(string path, Puppet puppet) {
         // Reset bindings
         item.bindings.length = 0;
     }
+    if (!item.tryLoadAnimations()) {
+        // Reset animations
+        item.animations.length = 0;
+    }
     item.genBindings();
+    item.genAnimationControls();
 
     insScene.sceneItems ~= item;
 }

From 0d36faf7239ea8387089eadb2cba33dab1977f97 Mon Sep 17 00:00:00 2001
From: Grillo del Mal <grillo@delmal.cl>
Date: Mon, 4 Mar 2024 22:22:41 -0300
Subject: [PATCH 2/3] Implement animation triggering by tracking

---
 source/session/animation/package.d | 220 +++++++++++++++++---
 source/session/panels/animations.d | 313 ++++++++++++++++++++++++++++-
 source/session/scene/package.d     |   5 +
 3 files changed, 499 insertions(+), 39 deletions(-)

diff --git a/source/session/animation/package.d b/source/session/animation/package.d
index cd98adc..37a68b8 100644
--- a/source/session/animation/package.d
+++ b/source/session/animation/package.d
@@ -1,16 +1,24 @@
+/*
+    Distributed under the 2-Clause BSD License, see LICENSE file.
+
+    Authors: Grillo del Mal
+*/
 module session.animation;
 
-import session.tracking;
+public import session.tracking;
 import inochi2d.core.animation;
 import inochi2d.core.animation.player;
 import fghj;
 import i18n;
 import std.format;
+import std.algorithm;
+import session.scene;
+import inmath;
 
 enum TriggerType {
     None,
-    TrackingTrigger,
-    EventTrigger
+    Tracking,
+    Event
 }
 
 enum TriggerEvent {
@@ -19,11 +27,74 @@ enum TriggerEvent {
     TrackingOn,
 }
 
+enum ThresholdDir {
+    None = 0,
+    Down,
+    Up,
+    Both
+}
+
+const(char)* thresholdDirectionIcon(ThresholdDir dir) {
+    return dir == ThresholdDir.Up ? "" :
+        dir == ThresholdDir.Down ? "" :
+        dir == ThresholdDir.Both ? "" :
+        "";
+}
+
+const(char)* triggerTypeString(TriggerType t){
+    switch(t){
+        case TriggerType.None:
+        return __("None");
+        case TriggerType.Tracking:
+        return __("Tracking");
+        case TriggerType.Event:
+        return __("Event");
+        default:
+        return __("");
+    }
+}
+
 class AnimationControl {
+private:
+    bool playTest(float src){
+        return defaultThresholds ? 
+            ((inVal < 1) && (src >= 1)):
+            ((playThresholdDir & ThresholdDir.Up) && (
+                inVal < playThresholdValue) && (src >= playThresholdValue) ? 
+                true :
+                ((playThresholdDir & ThresholdDir.Down) && (
+                    inVal > playThresholdValue) && (src <= playThresholdValue)) ?
+                    true:
+                    false);
+    }
+
+    bool stopTest(float src){
+        return defaultThresholds ? 
+            ((inVal > 0) && (src <= 0)):
+            ((stopThresholdDir & ThresholdDir.Up) && (
+                inVal < stopThresholdValue) && (src >= stopThresholdValue) ? 
+                true :
+                ((stopThresholdDir & ThresholdDir.Down) && (
+                    inVal > stopThresholdValue) && (src <= stopThresholdValue)) ?
+                    true:
+                    false);
+    }
+
+    bool fullStopTest(float src){
+        return defaultThresholds ? 
+            ((inVal > -1) && (src <= -1)):
+            ((fullStopThresholdDir & ThresholdDir.Up) && (
+                inVal < fullStopThresholdValue) && (src >= fullStopThresholdValue) ? 
+                true :
+                ((fullStopThresholdDir & ThresholdDir.Down) && (
+                    inVal > fullStopThresholdValue) && (src <= fullStopThresholdValue)) ?
+                    true:
+                    false);
+    }
+
 public:
     string name;
     bool loop = true;
-    bool inmediateStop = false;
 
     TriggerType type = TriggerType.None;
 
@@ -31,10 +102,16 @@ public:
     string sourceName;
     string sourceDisplayName;
     SourceType sourceType;
-    bool inverse;
-    float leadInValue = 1;
-    float leadOutValue = 0;
-    float fullStopValue = -1;
+
+    bool defaultThresholds = true;
+
+    float playThresholdValue = 1;
+    float stopThresholdValue = 0;
+    float fullStopThresholdValue = -1;
+
+    ThresholdDir playThresholdDir = ThresholdDir.Up;
+    ThresholdDir stopThresholdDir = ThresholdDir.Down;
+    ThresholdDir fullStopThresholdDir = ThresholdDir.Down;
 
     // EventBidning
     TriggerEvent leadInEvent;
@@ -42,7 +119,14 @@ public:
     TriggerEvent fullStopEvent;
 
     // Util
-    AnimationPlaybackRef anim; 
+    AnimationPlaybackRef anim;
+    float inVal;
+
+    float inValToBindingValue() {
+        float max_v = defaultThresholds ? 1 : max(playThresholdValue, stopThresholdValue, fullStopThresholdValue);
+        float min_v = defaultThresholds ? -1 : min(playThresholdValue, stopThresholdValue, fullStopThresholdValue);
+        return (inVal - min_v) / (max_v - min_v);
+    }
 
     void serialize(S)(ref S serializer) {
         auto state = serializer.objectBegin;
@@ -50,29 +134,34 @@ public:
             serializer.putValue(name);
             serializer.putKey("loop");
             serializer.putValue(loop);
-            serializer.putKey("inmediateStop");
-            serializer.putValue(inmediateStop);
             serializer.putKey("triggerType");
             serializer.serializeValue(type);
 
             switch(type) {
-                case TriggerType.TrackingTrigger:
+                case TriggerType.Tracking:
                     serializer.putKey("sourceName");
                     serializer.putValue(sourceName);
                     serializer.putKey("sourceType");
                     serializer.serializeValue(sourceType);
 
-                    serializer.putKey("inverse");
-                    serializer.putValue(inverse);
+                    serializer.putKey("defaultThresholds");
+                    serializer.putValue(defaultThresholds);
 
-                    serializer.putKey("leadInValue");
-                    serializer.putValue(leadInValue);
-                    serializer.putKey("leadOutValue");
-                    serializer.putValue(leadOutValue);
-                    serializer.putKey("fullStopValue");
-                    serializer.putValue(fullStopValue);
+                    serializer.putKey("playThresholdValue");
+                    serializer.putValue(playThresholdValue);
+                    serializer.putKey("stopThresholdValue");
+                    serializer.putValue(stopThresholdValue);
+                    serializer.putKey("fullStopThresholdValue");
+                    serializer.putValue(fullStopThresholdValue);
+
+                    serializer.putKey("playThresholdDir");
+                    serializer.serializeValue(playThresholdDir);
+                    serializer.putKey("stopThresholdDir");
+                    serializer.serializeValue(stopThresholdDir);
+                    serializer.putKey("fullStopThresholdDir");
+                    serializer.serializeValue(fullStopThresholdDir);
                     break;
-                case TriggerType.EventTrigger:
+                case TriggerType.Event:
                     serializer.putKey("leadInEvent");
                     serializer.serializeValue(leadInEvent);
                     serializer.putKey("leadOutEvent");
@@ -89,25 +178,28 @@ public:
     SerdeException deserializeFromFghj(Fghj data) {
         data["name"].deserializeValue(name);
         data["loop"].deserializeValue(loop);
-        data["inmediateStop"].deserializeValue(inmediateStop);
         data["triggerType"].deserializeValue(type);
 
         switch(type) {
-            case TriggerType.TrackingTrigger:
+            case TriggerType.Tracking:
                 data["sourceName"].deserializeValue(sourceName);
                 data["sourceType"].deserializeValue(sourceType);
 
-                data["inverse"].deserializeValue(inverse);
-                
-                data["leadInValue"].deserializeValue(leadInValue);
-                data["leadOutValue"].deserializeValue(leadOutValue);
-                data["fullStopValue"].deserializeValue(fullStopValue);
+                data["defaultThresholds"].deserializeValue(defaultThresholds);
+
+                data["playThresholdValue"].deserializeValue(playThresholdValue);
+                data["stopThresholdValue"].deserializeValue(stopThresholdValue);
+                data["fullStopThresholdValue"].deserializeValue(fullStopThresholdValue);
+
+                data["playThresholdDir"].deserializeValue(playThresholdDir);
+                data["stopThresholdDir"].deserializeValue(stopThresholdDir);
+                data["fullStopThresholdDir"].deserializeValue(fullStopThresholdDir);
                 this.createSourceDisplayName();
                 break;
-            case TriggerType.EventTrigger:
-                data["leadInEvent"].deserializeValue(leadInValue);
-                data["leadOutEvent"].deserializeValue(leadOutValue);
-                data["fullStopEvent"].deserializeValue(fullStopValue);
+            case TriggerType.Event:
+                data["leadInEvent"].deserializeValue(leadInEvent);
+                data["leadOutEvent"].deserializeValue(leadOutEvent);
+                data["fullStopEvent"].deserializeValue(fullStopEvent);
                 break;
             default: break;
         }
@@ -121,6 +213,70 @@ public:
 
     }
 
+    void update() {
+        switch(type) {
+            case TriggerType.Tracking:
+                if (sourceName.length == 0) {
+                    break;
+                }
+
+                float src = 0;
+                if (insScene.space.currentZone) {
+                    switch(sourceType) {
+
+                        case SourceType.Blendshape:
+                            src = insScene.space.currentZone.getBlendshapeFor(sourceName);
+                            break;
+
+                        case SourceType.BonePosX:
+                            src = insScene.space.currentZone.getBoneFor(sourceName).position.x;
+                            break;
+
+                        case SourceType.BonePosY:
+                            src = insScene.space.currentZone.getBoneFor(sourceName).position.y;
+                            break;
+
+                        case SourceType.BonePosZ:
+                            src = insScene.space.currentZone.getBoneFor(sourceName).position.z;
+                            break;
+
+                        case SourceType.BoneRotRoll:
+                            src = insScene.space.currentZone.getBoneFor(sourceName).rotation.roll.degrees;
+                            break;
+
+                        case SourceType.BoneRotPitch:
+                            src = insScene.space.currentZone.getBoneFor(sourceName).rotation.pitch.degrees;
+                            break;
+
+                        case SourceType.BoneRotYaw:
+                            src = insScene.space.currentZone.getBoneFor(sourceName).rotation.yaw.degrees;
+                            break;
+                        default: assert(0);
+                    }
+                }
+
+                // Ignore if tracking is lost.
+                if (!insScene.space.hasAnyFocus()) {
+                    break;
+                }
+
+                // Check if need to trigger change
+                if (!anim.playing || anim.paused) {
+                    // Test for play
+                    if(playTest(src)) anim.play(loop);
+                } else {
+                    // Test for Stop
+                    if(fullStopTest(src)) anim.stop(true);
+                    else if(stopTest(src)) anim.stop(false);
+                }
+
+                //Set latest inVal
+                inVal = src;
+                break;
+            default: break;
+        }
+    }
+
     void createSourceDisplayName() {
         switch(sourceType) {
             case SourceType.Blendshape:
diff --git a/source/session/panels/animations.d b/source/session/panels/animations.d
index 43a4af3..fb0aa9b 100644
--- a/source/session/panels/animations.d
+++ b/source/session/panels/animations.d
@@ -1,3 +1,8 @@
+/*
+    Distributed under the 2-Clause BSD License, see LICENSE file.
+
+    Authors: Grillo del Mal
+*/
 module session.panels.animations;
 import inui.panel;
 import i18n;
@@ -7,12 +12,272 @@ import std.string;
 import std.algorithm.searching;
 import inochi2d.core.animation.player;
 import inmath;
+import session.animation;
+import bindbc.imgui;
+
+private {
+    string trackingFilter;
+
+    struct TrackingSource {
+        bool isBone;
+        string name;
+        const(char)* cName;
+    }
+}
 
 class AnimationsPanel : Panel {
-    string _selected;
-    immutable(char) * _selectedCName;
-    string _selectFilter;
+private:
+    TrackingSource[] sources;
+    string[] indexableSourceNames;
+
+    // Refreshes the list of tracking sources
+    void refresh(ref AnimationControl[] animationControls) {
+        auto blendshapes = insScene.space.getAllBlendshapeNames();
+        auto bones = insScene.space.getAllBoneNames();
+        
+        sources.length = blendshapes.length + bones.length;
+        indexableSourceNames.length = sources.length;
+
+        foreach(i, blendshape; blendshapes) {
+            sources[i] = TrackingSource(
+                false,
+                blendshape,
+                blendshape.toStringz
+            );
+            indexableSourceNames[i] = blendshape.toLower;
+        }
+
+        foreach(i, bone; bones) {
+            sources[blendshapes.length+i] = TrackingSource(
+                true,
+                bone,
+                bone.toStringz
+            );
+
+            indexableSourceNames[blendshapes.length+i] = bone.toLower;
+        }
+
+        // Add any bindings unnacounted for which are stored in the model.
+        trkMain: foreach(ac; animationControls) {
+            
+            // Skip non-existent sources
+            if (ac.sourceName.length == 0) continue;
+
+            TrackingSource src = TrackingSource(
+                ac.sourceType != SourceType.Blendshape,
+                ac.sourceName,
+                ac.sourceName.toStringz
+            );
+
+            // Skip anything we already know
+            foreach(xsrc; sources) {
+                if (xsrc.isBone == src.isBone && xsrc.name == src.name) continue trkMain;
+            }
+
+            sources ~= src;
+            indexableSourceNames ~= src.name.toLower;
+        }
+    }
+
+    void trackingOptions(AnimationControl ac){
+        float default_val;
+        bool hasTrackingSrc = ac.sourceName.length > 0;
+        uiImIndent();
+
+        uiImLabel(_("Tracking Parameter"));
+        if (uiImBeginComboBox("SELECTION_COMBO", hasTrackingSrc ? ac.sourceDisplayName.toStringz : __("Not tracked"))) {
+            if (uiImInputText("###FILTER", uiImAvailableSpace().x, trackingFilter)) {
+                trackingFilter = trackingFilter.toLower();
+            }
+
+            uiImDummy(vec2(0, 8));
+
+            foreach(ix, source; sources) {
+                
+                if (trackingFilter.length > 0 && !indexableSourceNames[ix].canFind(trackingFilter)) continue;
+
+                bool selected = ac.sourceName == source.name;
+                bool nameValid = source.name.length > 0;
+                if (source.isBone) {
+                    if (uiImBeginMenu(source.cName)) {
+                        if (uiImMenuItem(__("X"))) {
+                            ac.sourceName = source.name;
+                            ac.sourceType = SourceType.BonePosX;
+                            ac.createSourceDisplayName();
+                            trackingFilter = null;
+                        }
+                        if (uiImMenuItem(__("Y"))) {
+                            ac.sourceName = source.name;
+                            ac.sourceType = SourceType.BonePosY;
+                            ac.createSourceDisplayName();
+                            trackingFilter = null;
+                        }
+                        if (uiImMenuItem(__("Z"))) {
+                            ac.sourceName = source.name;
+                            ac.sourceType = SourceType.BonePosZ;
+                            ac.createSourceDisplayName();
+                            trackingFilter = null;
+                        }
+                        if (uiImMenuItem(__("Roll"))) {
+                            ac.sourceName = source.name;
+                            ac.sourceType = SourceType.BoneRotRoll;
+                            ac.createSourceDisplayName();
+                            trackingFilter = null;
+                        }
+                        if (uiImMenuItem(__("Pitch"))) {
+                            ac.sourceName = source.name;
+                            ac.sourceType = SourceType.BoneRotPitch;
+                            ac.createSourceDisplayName();
+                            trackingFilter = null;
+                        }
+                        if (uiImMenuItem(__("Yaw"))) {
+                            ac.sourceName = source.name;
+                            ac.sourceType = SourceType.BoneRotYaw;
+                            ac.createSourceDisplayName();
+                            trackingFilter = null;
+                        }
+                        uiImEndMenu();
+                    }
+                } else {
+                    if (uiImSelectable(nameValid ? source.cName : "###NoName", selected)) {
+                        trackingFilter = null;
+                        ac.sourceType = SourceType.Blendshape;
+                        ac.sourceName = source.name;
+                        ac.createSourceDisplayName();
+                    }
+                }
+            }
+            uiImEndComboBox();
+        }
+
+        if (hasTrackingSrc) {
+            uiImSameLine(0, 4);
+            if (uiImButton(__("Reset"))){
+                ac.sourceName = null;
+            }
+        }
 
+        if (hasTrackingSrc) {
+            uiImProgress(ac.inValToBindingValue(), vec2(-float.min_normal, 0), "");
+            uiImDummy(vec2(0, 8));
+            uiImCheckbox(__("Default Thresholds"), ac.defaultThresholds);
+
+            if(ac.defaultThresholds){
+                igBeginDisabled();
+            }
+            uiImLabel(_("Play Threshold"));
+            uiImPush(0);
+                uiImIndent();
+                default_val = 1;
+                switch(ac.sourceType) {
+                    case SourceType.Blendshape:
+                        // TODO: Make all blendshapes in facetrack-d 0->1
+                        uiImDrag(ac.defaultThresholds ? default_val : ac.playThresholdValue, -1, 1);
+                        break;
+
+                    case SourceType.BonePosX:
+                    case SourceType.BonePosY:
+                    case SourceType.BonePosZ:
+                        uiImDrag(ac.defaultThresholds ? default_val : ac.playThresholdValue, -float.max, float.max);
+                        break;
+
+                    case SourceType.BoneRotPitch:
+                    case SourceType.BoneRotRoll:
+                    case SourceType.BoneRotYaw:
+                        uiImDrag(ac.defaultThresholds ? default_val : ac.playThresholdValue, -180, 180);
+                        break;
+                        
+                    default: assert(0);
+                }
+                uiImSameLine(0, 0);
+                if (uiImButton(
+                        thresholdDirectionIcon(ac.defaultThresholds ? ThresholdDir.Up : ac.playThresholdDir))) {
+                    if(ac.playThresholdDir < ThresholdDir.Both) ac.playThresholdDir += 1;
+                    else ac.playThresholdDir = ThresholdDir.None;
+                }
+
+                uiImUnindent();
+            uiImPop();
+            
+            uiImLabel(_("Stop Threshold"));
+            uiImPush(1);
+                uiImIndent();
+                default_val = 0;
+                switch(ac.sourceType) {
+                    case SourceType.Blendshape:
+                        // TODO: Make all blendshapes in facetrack-d 0->1
+                        uiImDrag(ac.defaultThresholds ? default_val : ac.stopThresholdValue, -1, 1);
+                        break;
+
+                    case SourceType.BonePosX:
+                    case SourceType.BonePosY:
+                    case SourceType.BonePosZ:
+                        uiImDrag(ac.defaultThresholds ? default_val : ac.stopThresholdValue, -float.max, float.max);
+                        break;
+
+                    case SourceType.BoneRotPitch:
+                    case SourceType.BoneRotRoll:
+                    case SourceType.BoneRotYaw:
+                        uiImDrag(ac.defaultThresholds ? default_val : ac.stopThresholdValue, -180, 180);
+                        break;
+                        
+                    default: assert(0);
+                }
+                uiImSameLine(0, 0);
+                if (uiImButton(
+                        thresholdDirectionIcon(ac.defaultThresholds ? ThresholdDir.Down : ac.stopThresholdDir))) {
+                    if(ac.stopThresholdDir < ThresholdDir.Both) ac.stopThresholdDir += 1;
+                    else ac.stopThresholdDir = ThresholdDir.None;
+                }
+                uiImUnindent();
+            uiImPop();
+
+            uiImLabel(_("Full Stop Threshold"));
+            uiImPush(2);
+                uiImIndent();
+                default_val = -1;
+                switch(ac.sourceType) {
+                    case SourceType.Blendshape:
+                        // TODO: Make all blendshapes in facetrack-d 0->1
+                        uiImDrag(ac.defaultThresholds ? default_val : ac.fullStopThresholdValue, -1, 1);
+                        break;
+
+                    case SourceType.BonePosX:
+                    case SourceType.BonePosY:
+                    case SourceType.BonePosZ:
+                        uiImDrag(ac.defaultThresholds ? default_val : ac.fullStopThresholdValue, -float.max, float.max);
+                        break;
+
+                    case SourceType.BoneRotPitch:
+                    case SourceType.BoneRotRoll:
+                    case SourceType.BoneRotYaw:
+                        uiImDrag(ac.defaultThresholds ? default_val : ac.fullStopThresholdValue, -180, 180);
+                        break;
+                        
+                    default: assert(0);
+                }
+                uiImSameLine(0, 0);
+                if (uiImButton(
+                        thresholdDirectionIcon(ac.defaultThresholds ? ThresholdDir.Down : ac.fullStopThresholdDir))) {
+                    if(ac.fullStopThresholdDir < ThresholdDir.Both) ac.fullStopThresholdDir += 1;
+                    else ac.fullStopThresholdDir = ThresholdDir.None;
+                }
+                uiImUnindent();
+            uiImPop();
+            if(ac.defaultThresholds){
+                igEndDisabled();
+            }
+
+        }
+        uiImUnindent();
+    }
+
+    void eventOptions(AnimationControl ac){
+        uiImIndent();
+            uiImLabel(_("TODO: Not yet implemented."));
+        uiImUnindent();
+        
+    }
 protected:
 
     override 
@@ -20,6 +285,13 @@ protected:
         auto item = insSceneSelectedSceneItem();
         if (item) {
 
+            if (uiImButton(__("Refresh"))) {
+                insScene.space.refresh();
+                refresh(item.animations);
+            }
+
+            uiImSameLine(0, 4);
+
             if (uiImButton(__("Save to File"))) {
                 try {
                     item.saveAnimations();
@@ -34,7 +306,7 @@ protected:
                 if (uiImHeader(ac.name.toStringz, true)) {
 
                     if (uiImButton("")) {
-                        anim.stop(ac.inmediateStop);
+                        anim.stop(igIsKeyDown(ImGuiKey.LeftShift) || igIsKeyDown(ImGuiKey.RightShift));
                     }
                     uiImSameLine(0, 0);
                     
@@ -46,7 +318,36 @@ protected:
                     uiImProgress((cast(float)anim.frame) / anim.frames, vec2(-float.min_normal, 0), "");
 
                     uiImCheckbox(__("Loop"), ac.loop);
-                    uiImCheckbox(__("Inmediate Stop"), ac.inmediateStop);
+
+                    uiImDummy(vec2(0, 12));
+
+                    uiImLabel(_("Trigger"));
+                    if (uiImBeginComboBox("ACType", triggerTypeString(ac.type))) {
+                        if (uiImSelectable(triggerTypeString(TriggerType.None))) {
+                            ac.type = TriggerType.None;
+                        }
+                        if (uiImSelectable(triggerTypeString(TriggerType.Tracking))) {
+                            ac.type = TriggerType.Tracking;
+                        }
+                        if (uiImSelectable(triggerTypeString(TriggerType.Event))) {
+                            ac.type = TriggerType.Event;
+                        }
+                        uiImEndComboBox();
+                    }
+
+                    uiImDummy(vec2(0, 8));
+
+                    switch(ac.type) {
+                        case TriggerType.Tracking:
+                            trackingOptions(ac);
+                            break;
+                        case TriggerType.Event:
+                            eventOptions(ac);
+                            break;
+                        default: break;
+                    }
+
+                    uiImDummy(vec2(0, 8));
 
                 }
                 uiImPop();
@@ -59,8 +360,6 @@ protected:
 public:
     this() {
         super("Animations", _("Animations"), true);
-        _selected = _("Select an animation");
-        _selectedCName = _selected.toStringz;
     }
 }
 
diff --git a/source/session/scene/package.d b/source/session/scene/package.d
index fd658a3..9636bd4 100644
--- a/source/session/scene/package.d
+++ b/source/session/scene/package.d
@@ -178,6 +178,7 @@ void insSceneAddPuppet(string path, Puppet puppet) {
         // Reset animations
         item.animations.length = 0;
     }
+
     item.genBindings();
     item.genAnimationControls();
 
@@ -335,6 +336,10 @@ void insUpdateScene() {
                 binding.update();
             }
 
+            foreach(ref ac; sceneItem.animations) {
+                ac.update();
+            }
+
             sceneItem.player.update(deltaTime());
             if (sceneItem.sleepAnim) {
                 if (sceneItem.sleepAnim.isRunning) {

From 61aef436c5ba59c38e9ffddb069b99fc9db51ece Mon Sep 17 00:00:00 2001
From: Grillo del Mal <grillo@delmal.cl>
Date: Tue, 5 Mar 2024 11:24:49 -0300
Subject: [PATCH 3/3] Stop all animations before playing the sleep animation

---
 source/session/scene/package.d | 1 +
 1 file changed, 1 insertion(+)

diff --git a/source/session/scene/package.d b/source/session/scene/package.d
index 9636bd4..6e324cb 100644
--- a/source/session/scene/package.d
+++ b/source/session/scene/package.d
@@ -317,6 +317,7 @@ void insUpdateScene() {
             if (insScene.zoneInactiveTimer >= 5) {
                 foreach(ref sceneItem; insScene.sceneItems) {
                     if (sceneItem.sleepAnim && !sceneItem.sleepAnim.playing()) {
+                        sceneItem.player.stopAll(true);
                         sceneItem.sleepAnim.strength = 1;
                         sceneItem.sleepAnim.play(true);
                     }
